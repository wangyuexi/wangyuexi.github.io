<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>这波是--线性表</title>
      <link href="2021/09/04/linear-must-do/"/>
      <url>2021/09/04/linear-must-do/</url>
      
        <content type="html"><![CDATA[<h2 id="重点算法"><a href="#重点算法" class="headerlink" title="重点算法"></a>重点算法</h2><h3 id="首先是"><a href="#首先是" class="headerlink" title="首先是"></a>首先是</h3><blockquote><p><font face="楷体" color="#ff0000" size="5">单链表的头插法和尾插法</font></p><p>详细算法在《数据结构专用》里，使用**标注出</p></blockquote><p><font face = "楷体" color = red>有个小问题就是：如果是带头结点的L -&gt; next = head -&gt; next</font></p><p><font face = "楷体" color = blue>也就是说L -&gt; next其实是指向第一个节点的</font></p><h3 id="然后是"><a href="#然后是" class="headerlink" title="然后是"></a>然后是</h3><blockquote><p>顺序表和链表的综合比较  ——   理解掌握O~!</p></blockquote><h3 id="算法一-真题"><a href="#算法一-真题" class="headerlink" title="算法一(真题)"></a>算法一(真题)</h3><blockquote><p>删除所有值为x的元素</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delx</span><span class="token punctuation">(</span>SeqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h3><blockquote><p>实现带头结点单链表的就地逆置问题</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkList <span class="token function">Reserve</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//L是带头结点的</span>    LNode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token comment">//p为工作指针，r为p的后继，防止断链</span>    p <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//从第一个元素结点开始</span>    L <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//先将头结点L的next域置为NULL</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//一次将元素结点摘下</span>        r <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//暂存p的后继</span>        p <span class="token operator">-></span> next <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//将p结点插入到头结点之后</span>        L <span class="token operator">-></span> next <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法三-呆逼中…"><a href="#算法三-呆逼中…" class="headerlink" title="算法三(呆逼中….)"></a>算法三(呆逼中….)</h3><blockquote><p>以表中第一元素为标准，表中所有值小于第一元素的结点放在第一元素的前面，反之放在后面(真题)</p><p>思想：找呀，找呀，找元素，找到一个小于第一元素的结点的前驱结点pre，删除pre -&gt; next对应的结点，将删除的结点插入到头结点L之后</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changelist</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">-></span> next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p1 <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//p1指向表中第一元素</span>    pre <span class="token operator">=</span> p1<span class="token punctuation">;</span>    p <span class="token operator">=</span> p1 <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token comment">//依次从p开始取结点，比p1 -> data小的插在头结点之后，比p1 -> data大的结点不做处理，继续往后找</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> data <span class="token operator">>=</span> p1 <span class="token operator">-></span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pre <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>            p <span class="token operator">-></span> next <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span>            L <span class="token operator">-></span> next <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法四-真题"><a href="#算法四-真题" class="headerlink" title="算法四(真题)"></a>算法四(真题)</h3><blockquote><p>建立一个带头结点的线性链表，用以存放输入的二进制数，链表中每个结点的data域存放一个二进制位。并在此链表上实现对二进制数加1的运算</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BinAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="必背算法"><a href="#必背算法" class="headerlink" title="必背算法"></a><font face ="楷体" color =red>必背算法</font></h2><h3 id="算法一-2002"><a href="#算法一-2002" class="headerlink" title="算法一(2002)"></a>算法一(2002)</h3><blockquote><p>二进制加法 ——  重点算法四</p></blockquote><h3 id="算法二-2005"><a href="#算法二-2005" class="headerlink" title="算法二(2005)"></a>算法二(2005)</h3><blockquote><p>将两个递增的线性表A和B，以单链表为存储结构，归并成一个递减的线性表C</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">MergeList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>La<span class="token punctuation">,</span>LinkList <span class="token operator">&amp;</span>Lb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>r<span class="token punctuation">,</span><span class="token operator">*</span>pa <span class="token operator">=</span> La <span class="token operator">-></span> next<span class="token punctuation">,</span><span class="token operator">*</span>pb <span class="token operator">=</span> Lb <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//分别是表La和Lb的工作指针</span>   La <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//La作为结果链表的头指针，先将结果链表初始化为空 </span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pa <span class="token operator">&amp;&amp;</span> pb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当两链表均不为空时，循环</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">-></span> data <span class="token operator">&lt;=</span> pb <span class="token operator">-></span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> pa <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//r暂存pa的后继结点指针</span>            pa <span class="token operator">-></span> next <span class="token operator">=</span> La <span class="token operator">-></span> next<span class="token punctuation">;</span>            La <span class="token operator">-></span> next <span class="token operator">=</span> pa<span class="token punctuation">;</span><span class="token comment">//将pa结点链于结果表中，同时逆置</span>            pa <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token comment">//恢复pa为当前待比较结点</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> pb <span class="token operator">-></span> next<span class="token punctuation">;</span>            pb <span class="token operator">-></span> next <span class="token operator">=</span> La <span class="token operator">-></span> next<span class="token punctuation">;</span>            La <span class="token operator">-></span> next <span class="token operator">=</span> pb<span class="token punctuation">;</span>            pb <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pb <span class="token operator">=</span> pa<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理剩下的一个非空链表</span>        r <span class="token operator">=</span> pb <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//依次插入到La中(头插法)</span>        pb <span class="token operator">-></span> next <span class="token operator">=</span> La <span class="token operator">-></span> next<span class="token punctuation">;</span>        La <span class="token operator">-></span> next <span class="token operator">=</span> pb<span class="token punctuation">;</span>        pb <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法三-2006-2010-—-有问题"><a href="#算法三-2006-2010-—-有问题" class="headerlink" title="算法三(2006,2010) — 有问题"></a>算法三(2006,2010) — 有问题</h3><blockquote><p>顺序表中将奇数排在前，偶数排在后</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AdjArray</span><span class="token punctuation">(</span>Seqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法四-2014"><a href="#算法四-2014" class="headerlink" title="算法四(2014)"></a>算法四(2014)</h3><blockquote><p>以第一个元素为基准，将小于该元素的结点放在其前面，大于该元素的结点放在其后面(链表)</p><p>—— 重点算法三</p></blockquote><h3 id="算法五-2015"><a href="#算法五-2015" class="headerlink" title="算法五(2015)"></a>算法五(2015)</h3><blockquote><p>算法实现带头结点单链表的就地逆置问题 —— 重点算法二</p></blockquote><h3 id="算法六-2016"><a href="#算法六-2016" class="headerlink" title="算法六(2016)"></a>算法六(2016)</h3><blockquote><p>以第一个元素为基准，将小于该元素的结点放在其前面，大于该元素的结点放在其后面(顺序表)</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span>Seqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">=</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法七-2017-——-小呆逼…"><a href="#算法七-2017-——-小呆逼…" class="headerlink" title="算法七(2017) —— (小呆逼….)"></a>算法七(2017) —— (小呆逼….)</h3><blockquote><p>删除单链表中值最大的结点</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkList <span class="token function">Delete_Min</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">,</span><span class="token operator">*</span>p <span class="token operator">=</span> pre <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//p为工作指针，pre指向其前驱</span>    LNode <span class="token operator">*</span>minpre <span class="token operator">=</span> pre<span class="token punctuation">,</span><span class="token operator">*</span>minp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//保存最小值结点，及其前驱</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> data <span class="token operator">&lt;</span> minp <span class="token operator">-></span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            minp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//找到比之前更小的结点</span>            minpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//继续扫描下个结点</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    minpre <span class="token operator">-></span> next <span class="token operator">=</span> minp <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//删除最小值结点</span>    <span class="token function">free</span><span class="token punctuation">(</span>minp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法八-2018"><a href="#算法八-2018" class="headerlink" title="算法八(2018)"></a>算法八(2018)</h3><blockquote><p>从尾到头打印单链表</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//使用了栈</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Stack s<span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    Node <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>p <span class="token operator">-></span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 重点以及必背算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序啊</title>
      <link href="2021/08/29/sort/"/>
      <url>2021/08/29/sort/</url>
      
        <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//依次将A[2]~A[n]插入前面已排序序列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//若A[i]关键码小于其前驱将A[i]插入有序表</span>            A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//复制为哨兵，A[0]不存放元素</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token comment">//从后往前查找带插入位置</span>                A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向后移动</span>    A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//复制到插入位置</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//依次将A[2]~A[n]插入前面已排序序列</span>        A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将A[i]暂存到A[0]</span>    low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>high <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置折半查找的范围</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//折半查找(默认递增有序)</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//取中间点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//查找左半表</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token comment">//查找右半表</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>            A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//统一后移元素，空出插入位置</span>    A<span class="token punctuation">[</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//插入操作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意事项：一直到 low &gt; high 才停止折半查找。当mid所指向元素等于当前元素时，应继续令 low = mid + 1，以保证”稳定性”。最终应将当前元素插入到 low 所指位置(即 high + 1)</p></blockquote><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//A[0]只是暂存单元，不是哨兵，当 j &lt;= 0时，插入位置已到</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>d <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> d<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//步长变化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//需将A[i]插入有序增量子表</span>                A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//暂存在A[0]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> d<span class="token punctuation">;</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j <span class="token operator">-=</span> d<span class="token punctuation">)</span>                    A<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录后移，查找插入的位置</span>    A<span class="token punctuation">[</span>j <span class="token operator">+</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//插入</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        flag <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//表示本趟冒泡是否发生交换的标志</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">></span> i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//一趟冒泡的过程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//若为逆序</span>                <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换</span>    flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">=</span> flag<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//本趟遍历后没有发生交换，说明表已经有序</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token comment">//跳出递归的条件</span>        <span class="token keyword">int</span> pivotpos <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//划分</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>low<span class="token punctuation">,</span>pivotpos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子表</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>pivotpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子表</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ElemType privot <span class="token operator">=</span> A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将当前表中的第一个元素设置为枢轴，对表进行划分</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> privot<span class="token punctuation">)</span>            <span class="token operator">--</span>high<span class="token punctuation">;</span>    A<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将比中枢轴大的元素移动到右边</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> privot<span class="token punctuation">)</span>            <span class="token operator">++</span>low<span class="token punctuation">;</span>    A<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将比中枢轴小的元素移动到左边</span>    A<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> privot<span class="token punctuation">;</span><span class="token comment">//枢轴元素存放到最终位置</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token comment">//返回存放枢轴的最终位置</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//一共进行n-1趟</span>        min <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//记录最小元素的位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//在A[i...n-1]中选择最小的元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//更新最小元素的位置</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//封装的swap()函数共移动元素3次</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//建立大根堆</span><span class="token keyword">void</span> <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//从i = [n/2] ~ 1,反复调整堆</span>        <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将以k为跟的子树调整为大根堆</span><span class="token keyword">void</span> <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//A[0]暂存子树的根结点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span>i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//沿k较大的子结点向下筛选</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//取k较大的子结点的下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//筛选结束</span>    <span class="token keyword">else</span>            A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将A[i]调整到双亲结点上</span>    k <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//修改k值，以便继续向下筛选</span>    A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">//被筛选结点的值放入最终位置</span><span class="token punctuation">&#125;</span><span class="token comment">//堆排序算法</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>ElemType A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BuildMaxHeap</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始建堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len<span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment">//n-1趟的建堆和交换过程</span>        <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出堆顶元素(和堆底元素进行交换)</span>    <span class="token function">HeadAdjust</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调整,把剩余得到i-1个元素整理成堆</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>堆的插入：</p><ul><li>新元素放入表尾(堆底)</li><li>根据大/小根堆的要求，新元素不断”上升”，直到无法上升为止</li></ul><p>堆的删除：</p><ul><li> 被删除元素用表尾(堆底)元素替代</li><li>根据大/小根堆的要求，新元素不断”下坠”，直到无法下坠为止</li></ul><p>关键字对比次数</p><ul><li> 每次”上升”调整只需要对比一次关键字</li><li> 每次”下坠”调整可能需要对比两次关键字，也可能需要对比一次关键字</li></ul></blockquote><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找相关题目练习</title>
      <link href="2021/08/24/seek-practise/"/>
      <url>2021/08/24/seek-practise/</url>
      
        <content type="html"><![CDATA[<h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><blockquote><p>写出折半查找的递归算法。初始调用时，low为1，high为ST.length</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token comment">//查找表的数据结构</span>    ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment">//元素存储空间基址，建表时按实际长度分配，0号单位空留</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//表的长度</span><span class="token punctuation">&#125;</span>SSTable<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">BinSearchRec</span><span class="token punctuation">(</span>SSTable ST<span class="token punctuation">,</span>ElemType key<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">></span> high<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//取中间位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> ST<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//向后半部分查找</span>        <span class="token function">Search</span><span class="token punctuation">(</span>ST<span class="token punctuation">,</span>key<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> ST<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//向前半部分查找</span>        <span class="token function">Search</span><span class="token punctuation">(</span>ST<span class="token punctuation">,</span>key<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token comment">//查找成功</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构代码练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seek-practise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找啊</title>
      <link href="2021/08/24/seek/"/>
      <url>2021/08/24/seek/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token comment">//查找表的数据结构</span>    ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment">//元素存储空间基址，建表时按实际长度分配，0号单位空留</span>    <span class="token keyword">int</span> TableLen<span class="token punctuation">;</span><span class="token comment">//表的长度</span><span class="token punctuation">&#125;</span>SSTable<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Search_Seq</span><span class="token punctuation">(</span>SSTable ST<span class="token punctuation">,</span>ElemType key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ST<span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span><span class="token comment">//"哨兵"</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> ST<span class="token punctuation">.</span>TableLen<span class="token punctuation">;</span>ST<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> key<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token comment">//从后往前找</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//不存在查找的关键字时，返回0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Binary_Search</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span>ElemType key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> L<span class="token punctuation">.</span>TableLen<span class="token punctuation">,</span> mid<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//取中间位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token comment">//查找成功则返回所在位置</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//从前半部分查找</span>    <span class="token keyword">else</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//从后半部分查找</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//查找失败，返回-1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图相关题目练习</title>
      <link href="2021/08/24/chart-practise/"/>
      <url>2021/08/24/chart-practise/</url>
      
        <content type="html"><![CDATA[<h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><blockquote><p>写出从图的邻接表表示转换成邻接矩阵表示的算法</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Convert</span><span class="token punctuation">(</span>ALGraph <span class="token operator">&amp;</span>G<span class="token punctuation">,</span><span class="token keyword">int</span> arcs<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//依次遍历各顶点表结点为头的边链表</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>G <span class="token operator">-></span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span><span class="token comment">//取出顶点i的第一条出边</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历边链表</span>            arcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p <span class="token operator">-></span> data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p <span class="token operator">-></span> nextarc<span class="token punctuation">;</span><span class="token comment">//取下一条出边</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><blockquote><p>写出图的深度优先搜索DFS算法的非递归算法(图采用邻接表形式)</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DFS_Non_RC</span><span class="token punctuation">(</span>AGraph <span class="token operator">&amp;</span>G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//从顶点v开始进行深度优先遍历，一次遍历一个连通分量的所有顶点</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token comment">//顶点序号</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化栈</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//初始化visited</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//v入栈</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        k <span class="token operator">=</span> <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//栈中退出一个顶点</span>        <span class="token function">visit</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先访问，再将其子结点入栈</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>w <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>w <span class="token operator">=</span> <span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//k的所有邻接点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//未进过栈的顶点进栈</span>                <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>w<span class="token punctuation">)</span>                visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//做标记，防止再次入栈</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><blockquote><p>分别采用基于深度优先遍历和广度优先遍历算法判别以邻接表方式存储的有向图中是否存在由顶点vi到顶点vj的路径(i != j)。算法中涉及的图的基本操作必须在此存储结构上实现。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//深度优先遍历算法</span><span class="token keyword">int</span> visited<span class="token punctuation">[</span>MAXSIXE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//访问标记数组</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>ALGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span>bool <span class="token operator">&amp;</span>can_reach<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        can_reach <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置访问标记</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>i<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>can_reach<span class="token punctuation">)</span><span class="token comment">//递归检测邻接点</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>p<span class="token punctuation">,</span>j<span class="token punctuation">,</span>can_reach<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//广度优先遍历算法</span><span class="token keyword">int</span> visited<span class="token punctuation">[</span>MAXSIXE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//访问标记数组</span><span class="token keyword">int</span> <span class="token function">BFS</span><span class="token punctuation">(</span>ALGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//顶点i入队</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//非空循环</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队头顶点出队</span>        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//设置访问标记</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> j<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token comment">//若p == j,则查找成功</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//否则,顶点p入队</span>                <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><blockquote><p>假设图用邻接表表示，涉及一个算法，输出从顶点Vi到顶点Vj的所有简单路径。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构代码练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chart-practise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图啊</title>
      <link href="2021/08/20/chart/"/>
      <url>2021/08/20/chart/</url>
      
        <content type="html"><![CDATA[<h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><h3 id="邻接矩阵法"><a href="#邻接矩阵法" class="headerlink" title="邻接矩阵法"></a>邻接矩阵法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxVertexNum <span class="token number">100</span></span><span class="token comment">//顶点数目的最大值</span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span><span class="token comment">//顶点的数据结构类型</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token comment">//带权图中边上权值的数据类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    VertexType Vex<span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顶点表</span>    EdgeType Edge<span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵，边表</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span><span class="token comment">//图的当前顶点数和弧数</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="邻接表法"><a href="#邻接表法" class="headerlink" title="邻接表法"></a>邻接表法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxVertexNum <span class="token number">100</span></span><span class="token comment">//顶点数目的最大值</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span><span class="token punctuation">&#123;</span><span class="token comment">//边表结点</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span><span class="token comment">//该弧所指向的顶点的位置</span>    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//指向下一条弧的指针</span>    <span class="token comment">//InfoType info;//网的边权值</span><span class="token punctuation">&#125;</span>ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VNode</span><span class="token punctuation">&#123;</span><span class="token comment">//顶点表结点</span>    VertexType data<span class="token punctuation">;</span><span class="token comment">//顶点信息</span>    ArcNode <span class="token operator">*</span>first<span class="token punctuation">;</span><span class="token comment">//指向第一条依附该顶点的弧的指针</span><span class="token punctuation">&#125;</span>VNode<span class="token punctuation">,</span>AdjList<span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    AdjList vertices<span class="token punctuation">;</span><span class="token comment">//邻接表</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span><span class="token comment">//图的顶点数和弧数</span><span class="token punctuation">&#125;</span>ALGraph<span class="token punctuation">;</span><span class="token comment">//ALGraph是以邻接表存储的图的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th align="center"></th><th align="center">邻接表法</th><th align="center">邻接矩阵</th></tr></thead><tbody><tr><td align="center">空间复杂度</td><td align="center">无向图O(|V|+2|E|)；有向图O(|V|+|E|)</td><td align="center">O(|v|²)</td></tr><tr><td align="center">适合用于</td><td align="center">存储稀疏图</td><td align="center">存储稠密图</td></tr><tr><td align="center">表示方式</td><td align="center">不唯一</td><td align="center">唯一</td></tr><tr><td align="center">计算度/出度/入度</td><td align="center">计算有向图的度、入度不方便，其余很方便</td><td align="center">必须遍历对应行或列</td></tr><tr><td align="center">找相邻的边</td><td align="center">找有向图的入边不方便，其余很方便</td><td align="center">必须遍历对应行或列</td></tr></tbody></table><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool visited<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问标记数组</span><span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//对图G进行广度优先遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//访问标记数组初始化</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化辅助队列Q</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//从0号顶点开始遍历</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//对每个连通分量调用一次BFS</span>            <span class="token function">BFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//从顶点v开始，广度优先遍历图G</span>    <span class="token function">visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问初始顶点v</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//对访问过的顶点做标记</span>    <span class="token function">Enqueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//顶点v入队列Q</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">Dequeue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//顶点v出队列Q</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>w <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>w <span class="token operator">=</span> <span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//检测v所有邻接点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//w为v的尚未访问的邻接顶点</span>                <span class="token function">visit</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问顶点w</span>                visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//对w做已访问标记</span>        <span class="token function">Enqueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//顶点w入队列</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>算法要点：</p><ul><li>需要一个辅助队列</li><li>如何从一个结点找到与之邻接的其他顶点</li><li>visited数组防止重复访问</li><li>如何处理非连通图</li></ul><p>复杂度：</p><ul><li> 空间复杂度：O(|V|)——辅助队列</li><li>时间复杂度：<ul><li>访问结点的时间 + 访问所有边的时间</li><li>邻接矩阵：O(|V|²)</li><li>邻接表：O(|V| + |E|)</li></ul></li></ul><p>广度优先生成树：</p><ul><li> 由广度优先遍历确定的树</li><li> 邻接表存储的图表示方式不唯一，遍历序列、生成树也不   唯一</li><li>遍历非连通图可得到广度优先生成森林</li></ul></blockquote><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool visited<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//访问标记数组</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//对图G进行深度优先遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//访问标记数组初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>v<span class="token punctuation">)</span><span class="token comment">//从0号顶点开始遍历</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//对每个连通分量调用一次DFS</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//从顶点v开始，深度优先遍历图G</span>    <span class="token function">visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问顶点v</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//对访问过的顶点做标记</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token function">FirstNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>w <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>w <span class="token operator">=</span> <span class="token function">NextNeighbor</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//检测v所有邻接点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//w为v的尚未访问的邻接顶点</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>算法要点：</p><ul><li> 递归的深入探索未被访问过的邻接点（类似于树的先根遍历的实现）</li><li>如何从一个结点找到与之邻接的其他顶点</li><li>visited数组防止重复访问</li><li>如何处理非连通图</li></ul><p>复杂度分析：</p><ul><li> 空间复杂度：O(|V|)——来自递归工作栈</li><li>时间复杂度：访问结点的时间 + 访问所有边的时间<ul><li> 邻接矩阵：O(|V|²)</li><li> 邻接表：O(|V| + |E|)</li></ul></li></ul><p>深度优先生成树：</p><ul><li> 由深度优先遍历确定的树 </li><li>邻接表存储的图表示方式不唯一，遍历序列、生成树也不   唯一</li><li>遍历非连通图可得到深度优先生成森林</li></ul></blockquote><h3 id="图的遍历和图的连通性"><a href="#图的遍历和图的连通性" class="headerlink" title="图的遍历和图的连通性"></a>图的遍历和图的连通性</h3><table><thead><tr><th align="center">无向图</th><th align="center">有向图</th></tr></thead><tbody><tr><td align="center">DFS/BFS函数调用次数 = 连通分量数</td><td align="center">从起始顶点到其他顶点都有路径，只需调用1次DFS/BFS函数</td></tr><tr><td align="center"></td><td align="center">对于强连通图，从任一顶点出发都只需要调用一次DFS/BFS函数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树相关题目练习</title>
      <link href="2021/08/17/tree-practice/"/>
      <url>2021/08/17/tree-practice/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树的遍历和线索二叉树"><a href="#二叉树的遍历和线索二叉树" class="headerlink" title="二叉树的遍历和线索二叉树"></a>二叉树的遍历和线索二叉树</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><blockquote><p>后序遍历二叉树的非递归算法</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> T<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//走到最左边</span>            <span class="token function">push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p <span class="token operator">-></span> lchild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//向右</span>            <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读栈顶结点(非出栈)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> rchild <span class="token operator">&amp;&amp;</span> p <span class="token operator">-></span> rchild <span class="token operator">!=</span> r<span class="token punctuation">)</span>                <span class="token comment">//若右子树存在且未被访问过</span>                p <span class="token operator">=</span> p <span class="token operator">-></span> rchild<span class="token punctuation">;</span><span class="token comment">//转向右</span>            <span class="token keyword">else</span>               <span class="token function">pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结点弹出</span>               <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问该结点</span>               r <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//记录最近访问过的结点</span>               p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//结点访问完后，重置p指针</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><blockquote><p>二叉树的自下而上，从右到左的层次遍历算法</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InvertLevel</span><span class="token punctuation">(</span>BiTree bt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Stack s<span class="token punctuation">;</span> Queue q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">InitStack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//栈初始化，栈中存放二叉树结点的指针</span>        <span class="token function">InitQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队列初始化，队列中存放二叉树结点的指针</span>        <span class="token function">EnQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>bt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">==</span> false<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//从上而下层次遍历</span>            <span class="token function">DeQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出队，入栈</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> lchild<span class="token punctuation">)</span>                <span class="token function">EnQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>p <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token comment">//若左子女不空，则入队</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> rchild<span class="token punctuation">)</span>                <span class="token function">EnQueue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>p <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token comment">//若右子女不空，则入队</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> false<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">visit</span><span class="token punctuation">(</span>p <span class="token operator">-></span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//自下而上，从右到左的层次遍历</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><blockquote><p>二叉树按二叉链表形式存储，写一个判别给定二叉树是否是完全二叉树的算法</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">IsComplete</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>T<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//空树为满二叉树</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//结点非空，将其左、右子树入队</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//结点为空，检查其后是否有非空结点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment">//结点非空，则不是完全二叉树</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><blockquote><p>假设二叉树采用二叉链表存储结构存储，设计一个算法，计算一棵给定二叉树的所有双分支结点个数</p></blockquote><p>计算一棵二叉树b中所有双分支结点个数的递归模型f(b)如下：</p><p>f(b) = 0                                                                                 若b = NULL</p><p>f(b) = f(b -&gt; lchild) + f(b -&gt; rchild) + 1                              若*b为双分支结点 </p><p>f(b) = f(b -&gt; lchild) + f(b -&gt; rchild)                                     其他情况(*b为单分支结点或叶子结点)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token keyword">if</span> <span class="token function">DsonNodes</span><span class="token punctuation">(</span>BiTree b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">-></span> lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">-></span> rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">DsonNodes</span><span class="token punctuation">(</span>b <span class="token operator">-></span> lchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">DsonNodes</span><span class="token punctuation">(</span>b <span class="token operator">-></span> rchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">DsonNodes</span><span class="token punctuation">(</span>b <span class="token operator">-></span> lchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">DsonNodes</span><span class="token punctuation">(</span>b <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><blockquote><p>设树B是一棵采用链式结构存储的二叉树，编写一个把树B中所有结点的左、右子树进行交换的函数</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>BiTree b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token function">swap</span><span class="token punctuation">(</span>b <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归的交换左子树</span>    <span class="token function">swap</span><span class="token punctuation">(</span>b <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归的交换右子树</span>    temp <span class="token operator">=</span> b <span class="token operator">-></span> lchild<span class="token punctuation">;</span> <span class="token comment">//交换左、右孩子结点</span>    b <span class="token operator">-></span> lchild <span class="token operator">=</span> b <span class="token operator">-></span> rchild<span class="token punctuation">;</span>    b <span class="token operator">-></span> rchild <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3><blockquote><p>假设二叉树采用二叉链表存储结构存储，设计一个算法，求先序遍历序列中第k个结点的值</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//遍历序号的全局变量</span>ElemType <span class="token function">PreNode</span><span class="token punctuation">(</span>BiTree b<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'$'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token comment">//若相等，则当前结点即为第k个结点</span>        <span class="token keyword">return</span> b <span class="token operator">-></span> data<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//下一个结点</span>    ch <span class="token operator">=</span> <span class="token function">PreNode</span><span class="token punctuation">(</span>b <span class="token operator">-></span> lchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树中寻找</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'$'</span><span class="token punctuation">)</span><span class="token comment">//在左子树中，返回该值</span>        <span class="token keyword">return</span> ch<span class="token punctuation">;</span>    ch <span class="token operator">=</span> <span class="token function">PreNode</span><span class="token punctuation">(</span>b <span class="token operator">-></span> rchild<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树中寻找</span>    <span class="token keyword">return</span> ch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><blockquote><p>已知二叉树以二叉链表存储、编写算法完成：对于树中每个元素值为x的结点，删除以它为根的子树，并释放相应的空间</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><blockquote><p>设一棵二叉树的结点结构为（LLINK, INFO, PLINK）, ROOT为指向该二叉树根结点的指针，p和q分别为指向该二叉树中任意两个结点的指针，编写算法ANCESTOR(ROOT, p, q, r)，找到p和q的最近公共祖先结点r</p></blockquote><h3 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h3><blockquote><p>假设二叉树采用二叉链表存储结构，设计一个算法，求非空二叉树b的宽度(即具有结点数最多的那一层的结点个数)</p></blockquote><h3 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h3><blockquote><p>设计判断两棵二叉树是否相似的算法。相似，指的是T1和T2都是空的二叉树或都只有一个根结点；或T1的左子树和T2的左子树是相似的，且T1的右子树和T2的右子树是相似的。</p></blockquote><p>f(T1 , T2) = 1            若T1 == T2 == NULL</p><p>f(T1 , T2) = 1            若T1和T2之一为NULL，另一个不为NULL</p><p>f(T1 , T2) = f(T1 -&gt; lchild , T2 -&gt; lchild) &amp;&amp; f(T1 -&gt; rchild , T2 -&gt; rchild)    若T1和T2均不为NULL</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">similar</span><span class="token punctuation">(</span>BiTree T1<span class="token punctuation">,</span>BiTree T2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> leftS<span class="token punctuation">,</span>rightS<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//两树皆空</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> T2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//只有一树为空</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token comment">//递归判断</span>        leftS <span class="token operator">=</span> <span class="token function">similar</span><span class="token punctuation">(</span>T1 <span class="token operator">-></span> lchild <span class="token punctuation">,</span> T2 <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    rightS <span class="token operator">=</span> <span class="token function">similar</span><span class="token punctuation">(</span>T1 <span class="token operator">-></span> rchild <span class="token punctuation">,</span> T2 <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> leftS<span class="token operator">&amp;&amp;</span>rightS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树与二叉树的应用"><a href="#树与二叉树的应用" class="headerlink" title="树与二叉树的应用"></a>树与二叉树的应用</h2><h3 id="第一题-1"><a href="#第一题-1" class="headerlink" title="第一题"></a>第一题</h3><blockquote><p>编写一个算法，判断给定的二叉树是否是二叉排序树</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//predt为全局变量，保存当前结点中序前驱的值，初始值为-∞</span>KeyType predt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">32767</span><span class="token keyword">int</span> <span class="token function">JudgeBST</span><span class="token punctuation">(</span>BiTree bt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b1<span class="token punctuation">,</span>b2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//空树</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        b1 <span class="token operator">=</span> <span class="token function">JudgeBST</span><span class="token punctuation">(</span>bt <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断左子树是否为二叉排序树</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> predt <span class="token operator">>=</span> bt <span class="token operator">-></span> data<span class="token punctuation">)</span>            <span class="token comment">//若左子树返回值为0或前驱大于等于当前结点</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//则不是二叉排序树</span>    predt <span class="token operator">=</span> bt <span class="token operator">-></span> data<span class="token punctuation">;</span> <span class="token comment">//保存当前结点的关键字</span>    b2 <span class="token operator">=</span> <span class="token function">JudgeBST</span><span class="token punctuation">(</span>bt <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断右子树</span>    <span class="token keyword">return</span> b2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h3><blockquote><p>设计一个算法，求出指定结点在给定二叉排序树中的层次</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">level</span><span class="token punctuation">(</span>BiTree bt<span class="token punctuation">,</span>BSTNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计查找次数</span>    BiTree t <span class="token operator">=</span> bt<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bt <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">-></span> data <span class="token operator">!=</span> p <span class="token operator">-></span> data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> data <span class="token operator">&lt;</span> t <span class="token operator">-></span> data<span class="token punctuation">)</span>                t <span class="token operator">=</span> t <span class="token operator">-></span> lchild<span class="token punctuation">;</span>    <span class="token keyword">else</span>                t <span class="token operator">=</span> t <span class="token operator">-></span> rchild<span class="token punctuation">;</span>    n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构代码练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree-practice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树啊</title>
      <link href="2021/08/16/tree/"/>
      <url>2021/08/16/tree/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>首先应该了解了树的基本概念，二叉树的概念以及基本的“运算”</p><p>对这些基本概念了解过后，接下来–芜湖起飞！！！</p></blockquote><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><blockquote><p>记忆口诀：根 ==&gt; 左 ==&gt; 右</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问根节点</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历左子树</span>        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历右子树</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><blockquote><p>记忆口诀：左 ==&gt; 根 ==&gt; 右</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历左子树</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问根节点      </span>        <span class="token function">InOrder</span><span class="token punctuation">(</span>T <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历右子树</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><blockquote><p>记忆口诀：左 ==&gt; 右 ==&gt; 根 </p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历左子树</span>        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历右子树</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问根节点      </span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h3><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><blockquote><p>① 初始化一个辅助队列</p><p>② 根结点入队</p><p>③ 若队列非空，则队头结点出队，访问该结点，并将其左、右     孩子插入队尾（如果有的话）</p><p>④ 重复③直至队列为空</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//二叉树的结点(链式存储)</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span class="token comment">//链式队列结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">&#123;</span>    BiTNode <span class="token operator">*</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinKNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>LinkNode <span class="token operator">*</span>front<span class="token punctuation">,</span><span class="token operator">*</span>rear<span class="token punctuation">;</span> <span class="token comment">//队头，队尾</span><span class="token punctuation">&#125;</span>LinkQueue<span class="token punctuation">;</span><span class="token comment">//层序遍历</span><span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkQueue Q<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化辅助队列</span>    BiTree p<span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结点入队</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//队列不空则循环</span>        <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队头结点出队</span>        <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问出队结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token comment">//左孩子入队</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token comment">//右孩子入队</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="由遍历序列构造二叉树"><a href="#由遍历序列构造二叉树" class="headerlink" title="由遍历序列构造二叉树"></a>由遍历序列构造二叉树</h3><blockquote><ul><li>前序 + 中序遍历序列</li><li>后序 + 中序遍历序列</li><li>层序 + 中序遍历序列</li></ul><p>key：找到树的根结点，并根据中序序列划分左右子树，再找到  左右子树的根结点。根据不同的遍历序列确定结点的位置。</p></blockquote><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><ul><li>基本概念：线索，前驱线索，后驱线索</li></ul><h3 id="线索二叉树的存储结构"><a href="#线索二叉树的存储结构" class="headerlink" title="线索二叉树的存储结构"></a>线索二叉树的存储结构</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ThreadNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ThreadNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span>    <span class="token keyword">int</span> ltag<span class="token punctuation">,</span>rtag<span class="token punctuation">;</span><span class="token comment">//左，右线索标志</span><span class="token punctuation">&#125;</span>ThreadNode<span class="token punctuation">,</span> <span class="token operator">*</span>ThreadTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//全局变量pre,指向当前访问结点的前驱</span>ThreadNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//中序线索化二叉树T</span><span class="token keyword">void</span> <span class="token function">CreateInThread</span><span class="token punctuation">(</span>ThreadTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//pre初始为NULL</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">InThread</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">-></span> rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        pre <span class="token operator">-></span> rtag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//中序遍历二叉树，一边遍历一边线索化</span><span class="token keyword">void</span> <span class="token function">InThread</span><span class="token punctuation">(</span>InThread T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">InThread</span><span class="token punctuation">(</span>T <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历左子树</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问根节点      </span>        <span class="token function">InThread</span><span class="token punctuation">(</span>T <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历右子树</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">vist</span><span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">-></span> lchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//左子树为空，建立前驱线索</span>        q <span class="token operator">-></span> lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span>        q <span class="token operator">-></span> ltag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pre <span class="token operator">-></span> rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pre <span class="token operator">-></span> rchild <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token comment">//建立前驱结点的后继线索</span>        pre <span class="token operator">-></span> ltag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pre <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先序线索化"><a href="#先序线索化" class="headerlink" title="先序线索化"></a>先序线索化</h3><blockquote><p>要注意“爱的魔力转圈圈”</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreThread</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问根节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">-></span> ltag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//lchild不是前驱线索</span>        <span class="token function">PreThread</span><span class="token punctuation">(</span>T <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreThread</span><span class="token punctuation">(</span>T <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归遍历右子树</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h3><blockquote><p>将中序线索化中的中序遍历改为后序遍历即可</p></blockquote><h2 id="线索二叉树的遍历"><a href="#线索二叉树的遍历" class="headerlink" title="线索二叉树的遍历"></a>线索二叉树的遍历</h2><h3 id="中序线索二叉树的遍历"><a href="#中序线索二叉树的遍历" class="headerlink" title="中序线索二叉树的遍历"></a>中序线索二叉树的遍历</h3><h4 id="找后继"><a href="#找后继" class="headerlink" title="找后继"></a>找后继</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//找到以p为根的子树中，第一个被中序遍历的结点</span>ThreadNode <span class="token operator">*</span><span class="token function">FirstNode</span><span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环找到最左下结点(不一定是叶结点)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> ltag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> lchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在中序线索二叉树中找到结点p的后继结点</span>ThreadNode <span class="token operator">*</span><span class="token function">NextNode</span><span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//右子树中最左下结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> rtag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">FirstNode</span><span class="token punctuation">(</span>p <span class="token operator">-></span> rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> p <span class="token operator">-></span> rchild<span class="token punctuation">&#125;</span><span class="token comment">//对中序线索二叉树进行中序遍历(利用线索实现的非递归算法)</span><span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">FirstNode</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">!</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token function">NextNode</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="找前驱"><a href="#找前驱" class="headerlink" title="找前驱"></a>找前驱</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//找到以p为根的子树中，最后一个被中序遍历的结点</span>ThreadNode <span class="token operator">*</span><span class="token function">LastNode</span><span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环找到最右下结点(不一定是叶结点)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> rtag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> rchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在中序线索二叉树中找到结点p的前驱结点</span>ThreadNode <span class="token operator">*</span><span class="token function">PreNode</span><span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//左子树中最右下结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> ltag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">LastNode</span><span class="token punctuation">(</span>p <span class="token operator">-></span> lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> p <span class="token operator">-></span> lchild<span class="token punctuation">&#125;</span><span class="token comment">//对中序线索二叉树进行逆向中序遍历</span><span class="token keyword">void</span> <span class="token function">RevInOrder</span><span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ThreadNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">LastNode</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">!</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token function">PreNode</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先序线索二叉树的遍历"><a href="#先序线索二叉树的遍历" class="headerlink" title="先序线索二叉树的遍历"></a>先序线索二叉树的遍历</h3><blockquote><p>可以找后继</p><p>找前驱有4种情况</p></blockquote><h3 id="后序线索二叉树的遍历"><a href="#后序线索二叉树的遍历" class="headerlink" title="后序线索二叉树的遍历"></a>后序线索二叉树的遍历</h3><blockquote><p>可以找前驱</p><p>找后继有4种情况</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center"></th><th align="center">中序线索二叉树</th><th align="center">先序线索二叉树</th><th align="center">后序线索二叉树</th></tr></thead><tbody><tr><td align="center">找前驱</td><td align="center">√</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">找后继</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr></tbody></table><h2 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h2><blockquote><ol><li>双亲表示法</li><li>孩子表示法</li><li>孩子兄弟表示法(左孩子右兄弟)</li></ol></blockquote><h2 id="树、森林与二叉树的相互转化"><a href="#树、森林与二叉树的相互转化" class="headerlink" title="树、森林与二叉树的相互转化"></a>树、森林与二叉树的相互转化</h2><h2 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h2><table><thead><tr><th align="center">树</th><th align="center">森林</th><th align="center">二叉树</th></tr></thead><tbody><tr><td align="center">先根遍历</td><td align="center">先序遍历</td><td align="center">先序遍历</td></tr><tr><td align="center">后根遍历</td><td align="center">中序遍历</td><td align="center">中序遍历</td></tr></tbody></table><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><h3 id="二叉排序的定义"><a href="#二叉排序的定义" class="headerlink" title="二叉排序的定义"></a>二叉排序的定义</h3><blockquote><p>左子树结点值 &lt; 根结点值 &lt; 右子树结点值</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//二叉排序树结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BSTNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BSTNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BSTNode<span class="token punctuation">,</span><span class="token operator">*</span>BSTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉排序的查找"><a href="#二叉排序的查找" class="headerlink" title="二叉排序的查找"></a>二叉排序的查找</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在二叉排序树中查找值为key的结点</span>BSTNode <span class="token operator">*</span><span class="token function">BST_Search</span><span class="token punctuation">(</span>BSTree T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//若数空或等于根结点值，则结束循环</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!=</span> T <span class="token operator">-></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> T <span class="token operator">-></span> key<span class="token punctuation">)</span>            <span class="token comment">//小于，则在左子树上查找</span>            T <span class="token operator">=</span> T <span class="token operator">-></span> lchild<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment">//大于，则在右子树上查找</span>            T <span class="token operator">=</span> T <span class="token operator">-></span> rchild<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在二叉排序树中查找值为key的结点(递归实现)</span>BSTNode <span class="token operator">*</span><span class="token function">BST_Search</span><span class="token punctuation">(</span>BSTree T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//查找失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> T <span class="token operator">-></span> key<span class="token punctuation">)</span>        <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token comment">//查找成功</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Key <span class="token operator">&lt;</span> T <span class="token operator">-></span> key<span class="token punctuation">)</span>        <span class="token comment">//在左子树中找</span>        <span class="token keyword">return</span> <span class="token function">BST_Search</span><span class="token punctuation">(</span>T <span class="token operator">-></span> lchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    eles        <span class="token comment">//在右子树中找</span>        <span class="token keyword">return</span> <span class="token function">BST_Search</span><span class="token punctuation">(</span>T <span class="token operator">-></span> rchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉排序的插入"><a href="#二叉排序的插入" class="headerlink" title="二叉排序的插入"></a>二叉排序的插入</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在二叉排序树中插入值为k的结点</span><span class="token comment">//在二叉排序树中插入值为k的结点(递归实现)</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">BST_Insert</span><span class="token punctuation">(</span>BSTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        T <span class="token operator">=</span> <span class="token punctuation">(</span>BSTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BSTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    T <span class="token operator">-></span> key <span class="token operator">=</span> k<span class="token punctuation">;</span>    T <span class="token operator">-></span> lchild <span class="token operator">=</span> T <span class="token operator">-></span> rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> T <span class="token operator">-></span> key<span class="token punctuation">)</span><span class="token comment">//树中存在相同关键字的节点</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>K <span class="token operator">&lt;</span> T <span class="token operator">-></span> key<span class="token punctuation">)</span>        <span class="token comment">//在左子树中找</span>        <span class="token keyword">return</span> <span class="token function">BST_Search</span><span class="token punctuation">(</span>T <span class="token operator">-></span> lchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    eles        <span class="token comment">//在右子树中找</span>        <span class="token keyword">return</span> <span class="token function">BST_Search</span><span class="token punctuation">(</span>T <span class="token operator">-></span> rchild<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的构造"><a href="#二叉树的构造" class="headerlink" title="二叉树的构造"></a>二叉树的构造</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//按照str[]中的关键字序列建立二叉排序树</span><span class="token keyword">void</span> <span class="token function">Creat_BST</span><span class="token punctuation">(</span>BSTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> <span class="token keyword">int</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//初始时T为空数</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//依次将每个关键字插入到二叉排序树中</span>        <span class="token function">BST_Insert</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的删除"><a href="#二叉树的删除" class="headerlink" title="二叉树的删除"></a>二叉树的删除</h3><blockquote><ol><li>删除的结点z是叶子结点，直接删除</li><li>若结点z只有一颗左子树或者右子树，让z的子树成为z父结点的子树，代替z的位置。</li><li>若结点z有左，右两棵子树，使用直接前驱或直接后继替代z。</li></ol></blockquote><h3 id="二叉树的查找效率分析"><a href="#二叉树的查找效率分析" class="headerlink" title="二叉树的查找效率分析"></a>二叉树的查找效率分析</h3><blockquote><p>查找成功的平均查找长度</p><p>查找失败的平均查找长度</p></blockquote><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><blockquote><p>平衡因子只能是-1,  0，1。</p></blockquote><h3 id="平衡二叉树的插入"><a href="#平衡二叉树的插入" class="headerlink" title="平衡二叉树的插入"></a>平衡二叉树的插入</h3><h4 id="LL平衡旋转"><a href="#LL平衡旋转" class="headerlink" title="LL平衡旋转"></a>LL平衡旋转</h4><blockquote><p>右单旋转</p></blockquote><h4 id="RR平衡旋转"><a href="#RR平衡旋转" class="headerlink" title="RR平衡旋转"></a>RR平衡旋转</h4><blockquote><p>左单旋转</p></blockquote><h4 id="LR平衡旋转"><a href="#LR平衡旋转" class="headerlink" title="LR平衡旋转"></a>LR平衡旋转</h4><blockquote><p>先左后右双旋转</p></blockquote><h4 id="RL平衡旋转"><a href="#RL平衡旋转" class="headerlink" title="RL平衡旋转"></a>RL平衡旋转</h4><blockquote><p>先右后左双旋转</p></blockquote><h3 id="查找效率分析"><a href="#查找效率分析" class="headerlink" title="查找效率分析"></a>查找效率分析</h3><blockquote><p>平衡二叉树的平均查找长度为O(log以2为底的n)</p></blockquote><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><h3 id="哈夫曼树的定义"><a href="#哈夫曼树的定义" class="headerlink" title="哈夫曼树的定义"></a>哈夫曼树的定义</h3><blockquote><p>带权路径长度(WPL)的最小二叉树称为哈夫曼树</p></blockquote><h3 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a>哈夫曼树的构造</h3><blockquote><p>选最小的结合</p></blockquote><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><blockquote><p>规定左为0，右为1</p><p>然后就可依次写出各个字符的编码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列代码练习</title>
      <link href="2021/08/09/queue-practise/"/>
      <url>2021/08/09/queue-practise/</url>
      
        <content type="html"><![CDATA[<h2 id="队列综合应用题"><a href="#队列综合应用题" class="headerlink" title="队列综合应用题"></a>队列综合应用题</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><blockquote><p>若希望循环队列中的元素都能得到利用，则需设计一个标志域tag，并以tag的值为0或1来区分队头指针front和队尾指针rear相同是的队列状态是”空”还是”满”。编写算法实现。</p></blockquote><p>解答：进队是tag为1，出队是tag为0</p><p>队空条件：Q.front == Q.rear 且 tag = 0</p><p>队满条件：Q.front == Q.rear 且 tag = 1</p><p>进队操作：Q.data[Q.rear] = x; Q.rear = (Q.rear + 1) % MaxSize; Q.tag = 1</p><p>出队操作：x = Q.data[Q.front]; Q.front= (Q.front+ 1) % MaxSize; Q.tag = 0</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//设“tag”法的循环队列入队算法</span><span class="token keyword">int</span> <span class="token function">EnQueue1</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear <span class="token operator">&amp;&amp;</span> Q<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//两个条件都满足则队满</span>    Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//设“tag”法的循环队列出队算法</span><span class="token keyword">int</span> <span class="token function">DeQueue1</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear <span class="token operator">&amp;&amp;</span> Q<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//两个条件都满足则队空</span>    x <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><blockquote><p>Q是一个队列，S是一个空栈，实现将队列中的元素逆置的算法</p></blockquote><p>解答：思想 =&gt; 可将队列中元素逐个出队列，然后全部逐个入栈，再逐个出栈，最后入队列。perfect！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Inverser</span><span class="token punctuation">(</span>Stack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span> Queue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队列中全部元素依次出队</span>        <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//元素依次入栈</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//栈中全部元素依次出栈</span>        <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再入栈</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><blockquote><p>利用两个栈S1，S2来模拟一个队列，已知栈的4个运算定义如下：</p><blockquote><p>Push(S,x)；                                    //元素x入栈S</p><p>Pop(S,x);                                        //S出栈并将出栈的值赋给x</p><p>StackEmpty(S);                             //判断栈是否为空</p><p>StackOverflow(S);                        //判断栈是否满</p></blockquote><p>如何利用栈的运算来实现该队列的3个运算(形参自由设计)</p><blockquote><p>Enqueue;                                      //将元素x入队</p><p>Dequeue;                                     //出队，并将出队元素存储在x中</p><p>QueueEmpty;                              //判断队列是否为空</p></blockquote></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//入队算法:</span><span class="token keyword">int</span> <span class="token function">Enqueue</span><span class="token punctuation">(</span>Stack <span class="token operator">&amp;</span>S1<span class="token punctuation">,</span>Stack <span class="token operator">&amp;</span>S2<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackOverflow</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">Push</span><span class="token punctuation">(</span>S1<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackOverflow</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"队列满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackOverflow</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">StackEmpty</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S1<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S2<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S1<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//出队算法。</span><span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Stack <span class="token operator">&amp;</span>S1<span class="token punctuation">,</span>Stack <span class="token operator">&amp;</span>S2<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>S2<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Pop</span><span class="token punctuation">(</span>S1<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S2<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>S2<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//判断队列为空的算法</span><span class="token keyword">int</span> <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Stack <span class="token operator">&amp;</span>S1<span class="token punctuation">,</span>Stack <span class="token operator">&amp;</span>S2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">StackEmpty</span><span class="token punctuation">(</span>S2<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构代码练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列--练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue--队列</title>
      <link href="2021/08/08/queue/"/>
      <url>2021/08/08/queue/</url>
      
        <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="队列的顺序存储结构"><a href="#队列的顺序存储结构" class="headerlink" title="队列的顺序存储结构"></a>队列的顺序存储结构</h3><h4 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化操作</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span><span class="token comment">//定义队列中元素的最大个数</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//静态数组存放栈中元素</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token comment">//队头指针和对尾指针</span><span class="token punctuation">&#125;</span>SqQueue<span class="token punctuation">;</span><span class="token comment">//初始化队列</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始时队头，队尾指向0</span><span class="token punctuation">&#125;</span><span class="token comment">//判断队列是否为空</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="入队操作-循环队列"><a href="#入队操作-循环队列" class="headerlink" title="入队操作(循环队列)"></a>入队操作(循环队列)</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;入队bool EnQueue(SqQueue &amp;Q,ElemType x)&#123;    if ((Q.rear + 1) % MaxSize &#x3D;&#x3D; Q.front)return false;    Q.data[Q.rear] &#x3D; x;&#x2F;&#x2F;新元素入队尾    Q.rear &#x3D; (Q.rear + 1) % MaxSize;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="出队操作-循环队列"><a href="#出队操作-循环队列" class="headerlink" title="出队操作(循环队列)"></a>出队操作(循环队列)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//出队(删除一个队头元素，并用x返回)</span>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    x <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//新元素入队尾</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MaxSize<span class="token punctuation">;</span><span class="token comment">//队头指针后移</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获得队头元素的值，用x返回</span>bool <span class="token function">GetHead</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    x <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//新元素入队尾</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环队列的判满"><a href="#循环队列的判满" class="headerlink" title="循环队列的判满"></a>循环队列的判满</h4><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><blockquote><p>队头指针在队尾指针的下一个位置</p><ul><li>队列为空：Q.front = Q.rear</li><li>队空已满：(Q.rear + 1 ) % MaxSize == Q.front</li></ul></blockquote><h5 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h5><blockquote><p>添加一个size显示当前队列长度</p><p>插入元素为size++</p><p>删除元素为size–</p><ul><li>队列为空：Q.size == 0</li><li>队列已满：Q.size = = MaxSize</li></ul></blockquote><h5 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h5><blockquote><p>添加一个tag-增加元素值为1，删除元素值为0</p><p>若Q.front == Q.rear且tag == 1，则队列已满</p><p>若Q.front == Q.rear且tag == 0，则队列为空</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stack--栈</title>
      <link href="2021/08/07/stack/"/>
      <url>2021/08/07/stack/</url>
      
        <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h3><h4 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//初始化操作</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span><span class="token comment">//定义栈中元素的最大个数</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//静态数组存放栈中元素</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token comment">//栈顶指针</span><span class="token punctuation">&#125;</span>SqStack<span class="token punctuation">;</span><span class="token comment">//初始化栈</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    S<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化栈顶指针</span><span class="token punctuation">&#125;</span><span class="token comment">//判断栈空</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//新元素入栈</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span>  MaxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//元素出栈</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>x <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读栈顶元素"><a href="#读栈顶元素" class="headerlink" title="读栈顶元素"></a>读栈顶元素</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//读栈顶元素</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>x <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span><span class="token comment">//定义栈中元素的最大个数</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//静态数组存放栈中元素</span>    <span class="token keyword">int</span> top0<span class="token punctuation">;</span><span class="token comment">//0号栈顶指针</span>    <span class="token keyword">int</span> top1<span class="token punctuation">;</span><span class="token comment">//1号栈顶指针</span><span class="token punctuation">&#125;</span>SqStack<span class="token punctuation">;</span><span class="token comment">//初始化栈</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    S<span class="token punctuation">.</span>top0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化栈顶指针</span>    S<span class="token punctuation">.</span>top1 <span class="token operator">=</span> MaxSize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//栈满的条件---top0 + 1 == top1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表相关练习</title>
      <link href="2021/08/06/linear-list-practise/"/>
      <url>2021/08/06/linear-list-practise/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序表综合应用题"><a href="#顺序表综合应用题" class="headerlink" title="顺序表综合应用题"></a>顺序表综合应用题</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><blockquote><p>从顺序表中删除具有最小值的元素（假设唯一）并由函数返回被删元素。空出的位置由最后一个元素填补，若顺序表为空，则显示出错信息并退出运行。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">Del_Min</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//删除顺序表L中最小元素的结点，并通过引用型参数value返回值</span>    <span class="token comment">//若成功则返回true，反之false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//表空退出</span>    value <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//假设下标为0的元素值最小</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环找最小值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token comment">//value记录当前最小的值</span>            value <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><blockquote><p>设计一个高效算法，将顺序表L的所有元素逆置，并要求算法的空间复杂度为O(1)。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Reverse</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ElemType e<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><blockquote><p>对长度为n的顺序表L，编写一个时间复杂度为O(n)、空间复杂度为O(1)的算法，该算法删除线性表中所有值为x的数据元素。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Del_x_l</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><blockquote><p>从有序顺序表中删除其值在给定值s与t之间（要求s&lt;t）的所有元素,若s或t不合理或顺序表为空，则显示出错信息并退出运行。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">Del_number</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType s<span class="token punctuation">,</span>ElemType t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">>=</span> t<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//寻找值大于或等于s的第一个元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//寻找值大于t的第一个元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前移，填补被删除的元素</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><blockquote><p>从顺序表中删除其值在给定值s与t之间（包含s和t，要求s&lt;t）的所有元素，若s或t不合理或顺序表为空，则显示出错信息并退出运行</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">Del_number</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType s<span class="token punctuation">,</span>ElemType t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">>=</span> t<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> s <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前元素前移k个位置</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">-=</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3><blockquote><p>从有序顺序表中删除所有其值重复的元素，使表中所有元素的值均不相同。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">Del_Same</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//查找下一个与上一个元素不相同的元素</span>            L<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//找到后元素前移</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><blockquote><p>将两个有序顺序表合并为一个新的有序顺序表，并由函数返回结果顺序表。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">Merge</span><span class="token punctuation">(</span>SqList A<span class="token punctuation">,</span>SqList B<span class="token punctuation">,</span>SqList <span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>length <span class="token operator">+</span> B<span class="token punctuation">.</span>length <span class="token operator">></span> C<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> B<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token comment">//循环两两比较，小的存入结果集</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            C<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>            C<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//还剩下一个没有比较完的</span>        C<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> B<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        C<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>C<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此算法的方法十分典型，必须牢固掌握。</li></ul><h2 id="链表综合应用题"><a href="#链表综合应用题" class="headerlink" title="链表综合应用题"></a>链表综合应用题</h2><h3 id="第一题-1"><a href="#第一题-1" class="headerlink" title="第一题"></a>第一题</h3><blockquote><p>设计一个递归算法，删除不带头结点的单链表L中所有值为x的结点</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Del_X</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//p指向待删除的结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//递归出口</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">-></span> data <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token comment">//若L所指结点的值为x</span>        p <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//删除*L，并让L指向下一个结点</span>    L <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Del_x</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归调用</span>    <span class="token keyword">else</span>        <span class="token function">Del_x</span><span class="token punctuation">(</span>L <span class="token operator">-></span> next<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token comment">//递归调用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h3><blockquote><p>在带头结点的单链表L中，删除所有值为x的结点，并释放其空间，假设值为x的结点不唯一，编写算法实现以上操作。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Del_x</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">,</span> <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token comment">//置p和pre的初始值</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> data <span class="token operator">==</span> x<span class="token punctuation">)</span>            q <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment">//q指向该结点</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>        pre <span class="token operator">-></span> next <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment">//删除*q结点</span>        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a>第三题</h3><blockquote><p>设L为带头结点的单链表，编写算法实现从尾到头反向输出每个结点的值。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">R_print</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">-></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">R_print</span><span class="token punctuation">(</span>L <span class="token operator">-></span> next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>L <span class="token operator">-></span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">R_Ignore_Head</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">R_print</span><span class="token punctuation">(</span>L <span class="token operator">-></span> next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四题-1"><a href="#第四题-1" class="headerlink" title="第四题"></a>第四题</h3><blockquote><p>编写在带头结点的单链表L中删除一个最小值结点的高效算法（假设最小值结点唯一）。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkList <span class="token function">Delete_Min</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>pre <span class="token operator">=</span> L<span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> pre <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token comment">//p为工作指针，pre指向其前驱</span>    LNode <span class="token operator">*</span>minpre <span class="token operator">=</span> pre<span class="token punctuation">,</span> <span class="token operator">*</span>minp <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token comment">//保存最小值结点及其前驱</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> data <span class="token operator">&lt;</span> minp <span class="token operator">=</span> p<span class="token punctuation">)</span>            minp <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//找到比之前找到最小结点更小的</span>        minpre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//继续扫描下个结点</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    minpre <span class="token operator">-></span> next <span class="token operator">=</span> min <span class="token operator">-></span> next<span class="token punctuation">;</span> <span class="token comment">//删除最小值结点</span>    <span class="token function">free</span><span class="token punctuation">(</span>minp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五题-1"><a href="#第五题-1" class="headerlink" title="第五题"></a>第五题</h3><blockquote><p>编写算法将带头结点的单链表就地逆置。“就地”指辅助空间复杂度为O(1)。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkList <span class="token function">Reserver</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第六题-1"><a href="#第六题-1" class="headerlink" title="第六题"></a>第六题</h3><blockquote><p>有一个带头结点的单链表L，设计一个算法使其元素递增有序。</p></blockquote><h3 id="第七题-1"><a href="#第七题-1" class="headerlink" title="第七题"></a>第七题</h3><blockquote><p>设在一个带表头结点的单链表中所有元素结点的数据值无序，编写一个函数，删除表中所有介于给定的两个值（作为函数参数给出）之间的所有元素。</p></blockquote><h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><blockquote><p>给定两个单链表，编写算法找出两个链表的公共结点。</p></blockquote><h3 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h3><blockquote><p>将一个带头结点的单链表A分解为两个带头结点的单链表A和B，使得A表中含有原表中序号为奇数的元素，B表中含有原表中序号为偶数的元素，且保持其相对顺序不变。</p></blockquote><h3 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h3><blockquote><p>设C = {a1,b1,a2,b2,…..,an,bn}为线性表，采用带头结点的hc单链表存放，设计一个就地算法，将其拆分为两个线性表，使得A = {a1,a2,….,an},B = {bn,….,b2,b1} </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构代码练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性表--练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表-循环链表(附顺序表和链表的比较)</title>
      <link href="2021/08/05/linear-list-xhlb/"/>
      <url>2021/08/05/linear-list-xhlb/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表链式表示之双链表"><a href="#线性表链式表示之双链表" class="headerlink" title="线性表链式表示之双链表"></a>线性表链式表示之双链表</h2><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token comment">//定义单链表的结点类型</span>    ElemType data<span class="token punctuation">;</span><span class="token comment">//每个节点存放一个数据元素</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//指针指向下一个节点</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//初始化一个循环单链表</span>bool <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//头结点next指向头结点</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断循环单链表是否为空</span>bool <span class="token function">Empty</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断结点p是否为循环单链表的表尾结点、</span>bool <span class="token function">isTail</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> LNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">==</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DNode<span class="token punctuation">,</span> <span class="token operator">*</span>DLinkList<span class="token punctuation">;</span><span class="token comment">//初始化双链表</span>bool <span class="token function">InitDLinkList</span><span class="token punctuation">(</span>DLinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L <span class="token operator">-></span> prior <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//头结点的prior指向头结点</span>    L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//头结点的next指向头结点</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断循环双链表是否为空</span>bool <span class="token function">Empty</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断结点p是否为循环双链表的表尾结点、</span>bool <span class="token function">isTail</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">,</span> DLNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">==</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环双链表的插入"><a href="#循环双链表的插入" class="headerlink" title="循环双链表的插入"></a>循环双链表的插入</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在p结点之后插入s结点</span>s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> s<span class="token punctuation">;</span>s <span class="token operator">-</span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此处就不需要if语句的判断</p><p>表尾的next     指向    头结点</p><p>表头的prior    指向    尾结点</p><p>因此不会出现空指针的错误</p></blockquote><h4 id="循环双链表的删除"><a href="#循环双链表的删除" class="headerlink" title="循环双链表的删除"></a>循环双链表的删除</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//删除p结点的后继结点</span>p <span class="token operator">-></span> next <span class="token operator">=</span> q <span class="token operator">-></span> next<span class="token punctuation">;</span>q <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>此处原理同上</p></blockquote><hr><h2 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h2><table><thead><tr><th align="center"></th><th align="center">顺序表</th><th align="center">链表</th></tr></thead><tbody><tr><td align="center">弹性（扩容）</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">增，删</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">查</td><td align="center">√</td><td align="center">×</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 循环链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表-双链表</title>
      <link href="2021/08/05/linear-list-slb/"/>
      <url>2021/08/05/linear-list-slb/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表链式表示之双链表"><a href="#线性表链式表示之双链表" class="headerlink" title="线性表链式表示之双链表"></a>线性表链式表示之双链表</h2><h3 id="双链表的定义"><a href="#双链表的定义" class="headerlink" title="双链表的定义"></a>双链表的定义</h3><h4 id="双链表的初始化"><a href="#双链表的初始化" class="headerlink" title="双链表的初始化"></a>双链表的初始化</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DNode<span class="token punctuation">,</span> <span class="token operator">*</span>DLinkList<span class="token punctuation">;</span><span class="token comment">//初始化双链表</span>bool <span class="token function">InitDLinkList</span><span class="token punctuation">(</span>DLinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L <span class="token operator">-></span> prior <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//头结点的prior永远指向 NULL</span>    L <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//头结点之后暂时还没有结点</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在p结点之后插入s结点</span>bool <span class="token function">InsertNextDNode</span><span class="token punctuation">(</span>DNode <span class="token operator">*</span>p<span class="token punctuation">,</span> DNode <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//将结点s插入到结点p之后</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    p <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> s<span class="token punctuation">;</span>    s <span class="token operator">-</span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span>    p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//删除p结点的后继结点</span>bool <span class="token function">DeleteNextDNode</span><span class="token punctuation">(</span>DNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    DNode <span class="token operator">*</span>q <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//找到p的后继结点q</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    p <span class="token operator">-></span> next <span class="token operator">=</span> q <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">-></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    q <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表的遍历"><a href="#双链表的遍历" class="headerlink" title="双链表的遍历"></a>双链表的遍历</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//前向遍历</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p <span class="token operator">-></span> prior<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//前向遍历(跳过头结点)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> prior <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p <span class="token operator">-></span> prior<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//后向遍历</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表-单链表</title>
      <link href="2021/08/05/linear-list-dlb/"/>
      <url>2021/08/05/linear-list-dlb/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表链式表示之单链表"><a href="#线性表链式表示之单链表" class="headerlink" title="线性表链式表示之单链表"></a>线性表链式表示之单链表</h2><h3 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h3><h4 id="单链表的初始化"><a href="#单链表的初始化" class="headerlink" title="单链表的初始化"></a>单链表的初始化</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token comment">//定义单链表的结点类型</span>    ElemType data<span class="token punctuation">;</span><span class="token comment">//每个节点存放一个数据元素</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//指针指向下一个节点</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//初始化一个单链表(带头结点)</span>bool <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span><span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>L <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//头结点后暂时还无结点</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>L为表头的指针域</li></ul><h3 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h3><blockquote><p>此处所有操作都基于带头结点</p></blockquote><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><h5 id="按位序插入"><a href="#按位序插入" class="headerlink" title="按位序插入"></a>按位序插入</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct LNode&#123;...&#125;LNode, *LinkList;&#x2F;&#x2F;在第i个位置插入元素 ebool ListInsert(LinkList &amp;L, int i, ElemType e)&#123;if(i&lt;1)return false;LNode *p;&#x2F;&#x2F;指针p指向当前扫描到的结点int j &#x3D; 0;&#x2F;&#x2F;当前p指向的是第几个结点p &#x3D; L;&#x2F;&#x2F;L指向头结点，头结点是第0个结点while(p !&#x3D; NULL &amp;&amp; j &lt; i - 1)&#123;&#x2F;&#x2F;循环找到第i-1个结点p &#x3D; p -&gt; next;j++;&#125;if(p &#x3D;&#x3D; NULL)&#x2F;&#x2F;i值不合法return false;LNode *s &#x3D;(LNode *) malloc(sizeof(LNode));s -&gt; data &#x3D; e;s -&gt; next &#x3D; p -&gt; next;p -&gt; next &#x3D; s;&#x2F;&#x2F;将结点s连到p结点之后return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a>指定结点的前插操作</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//前插操作：p结点之前插入元素e</span>bool <span class="token function">InsertPriorNode</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>p<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//新结点s连到p之后</span>s <span class="token operator">-></span> data <span class="token operator">=</span> p <span class="token operator">-></span> data<span class="token punctuation">;</span><span class="token comment">//将p中元素复制到s中</span>p <span class="token operator">-></span> data <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//p中元素覆盖为e</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a>指定结点的后插操作</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//后插操作：p结点之后插入元素e</span>bool <span class="token function">InsertNextNode</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>p<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>s <span class="token operator">=</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>s <span class="token operator">-></span> data <span class="token operator">=</span> e<span class="token punctuation">;</span>s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//将结点s连到p结点之后</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><h5 id="按位序删除"><a href="#按位序删除" class="headerlink" title="按位序删除"></a>按位序删除</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//删除第i个元素</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//指针p指向当前扫描到的结点</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前p指向的是第几个结点</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//L指向头结点，头结点是第0个结点</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环找到第i-1个结点</span>p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//第i-1个结点后已无其他结点</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>q <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//令q指向被删除的结点</span>e <span class="token operator">=</span> q <span class="token operator">-></span> data<span class="token punctuation">;</span><span class="token comment">//用e返回元素的值</span>p <span class="token operator">-></span> next <span class="token operator">=</span> q <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//将*q结点从链中断开</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放结点的存储空间</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定结点的删除"><a href="#指定结点的删除" class="headerlink" title="指定结点的删除"></a>指定结点的删除</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;删除指定结点bool DeleteNode(LNode *p)&#123;if(p &#x3D;&#x3D; NULL)return false;LNode *q &#x3D; p -&gt; next;&#x2F;&#x2F;令q指向*p的后继结点p -&gt; data &#x3D; p -&gt; next -&gt; data;&#x2F;&#x2F;和后继结点交换数据域p -&gt; next &#x3D; q -&gt; next;&#x2F;&#x2F;将*q结点从链中断开free(q);&#x2F;&#x2F;释放后继结点中的存储空间return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种方式如果删除的是最后一个结点会报错，使用双链表可以解决此问题.</li></ul><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//按位查找，返回第i个元素</span>LNode <span class="token operator">*</span><span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//指针P指向当前扫描到的结点</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前p指向的是第几个结点</span>    P <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//L指向头结点，头结点是第0个结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环找到第i个结点</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//按值查找，找到数据域为 e 的结点</span>LNode <span class="token operator">*</span><span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token comment">//从第1个结点开始查找数据域为e的结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">-></span> data <span class="token operator">!</span> <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立链表"><a href="#建立链表" class="headerlink" title="建立链表**"></a>建立链表**</h4><h5 id="尾插法建立"><a href="#尾插法建立" class="headerlink" title="尾插法建立**"></a>尾插法建立**</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkList <span class="token function">List_TailInsert</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token operator">*</span>r <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//r为表位结点</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">-></span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>        r <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span>        r <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//r指向新的表尾结点</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    r <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="头插法建立"><a href="#头插法建立" class="headerlink" title="头插法建立**"></a>头插法建立**</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkList <span class="token function">List_HeadInsert</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>s<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建头结点</span>    L <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//初始为空链表</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入结点的值</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建新结点</span>        s <span class="token operator">-></span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>        s <span class="token operator">-></span> next <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span>        L <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//将新结点插入表中，L为头指针</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>头插法会发现结果将插入的数值逆序了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表-顺序表</title>
      <link href="2021/08/05/linear-list-order/"/>
      <url>2021/08/05/linear-list-order/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表的顺序表示"><a href="#线性表的顺序表示" class="headerlink" title="线性表的顺序表示"></a>线性表的顺序表示</h2><h3 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h3><ul><li>顺序表的最大特点是：<font color=#FF0000 >表中元素的逻辑顺序与其物理顺序相同</font></li></ul><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span><span class="token comment">//定义最大长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用静态数组存放数据元素</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//顺序表当前的长度</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//顺序表类型的定义</span><span class="token comment">//初始化一个顺序表</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//默认值设置为0</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//顺序表初始长度为0</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SqList L<span class="token punctuation">;</span><span class="token comment">//声明一个顺序表</span><span class="token function">InitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化循序表</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">InitSize <span class="token number">10</span></span><span class="token comment">//顺序表的初始长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//指示动态分配数组的指针</span>    <span class="token keyword">int</span> MaxSize<span class="token punctuation">;</span><span class="token comment">//顺序表的最大容量</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//顺序表的当前长度</span><span class="token punctuation">&#125;</span>SeqList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SeqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用malloc函数申请一片连续的存储空间</span>L<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>InitSize <span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span>MaxSize <span class="token operator">=</span> InitSize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//增加动态数组的长度</span><span class="token keyword">void</span> <span class="token function">IncreaseSize</span><span class="token punctuation">(</span>SeqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">;</span>L<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>MaxSize <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将数据复制到新区域</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>MaxSize <span class="token operator">=</span> L<span class="token punctuation">.</span>MaxSize <span class="token operator">+</span> len<span class="token punctuation">;</span>    <span class="token comment">//顺序表的最大长度增加len</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放原来存储空间</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SeqList L<span class="token punctuation">;</span><span class="token comment">//声明一个顺序表</span>    <span class="token function">InitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化顺序表</span>    <span class="token comment">//....随便加几个数据....</span>    <span class="token function">IncreaseSize</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h3><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span><span class="token comment">//定义最大长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用静态数组存放数据元素</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//顺序表当前的长度</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//顺序表类型的定义</span><span class="token comment">//插入元素</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//判断i是否有效</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">>=</span> MaxSize<span class="token punctuation">)</span><span class="token comment">//当前存满，不能插入</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将第i个元素以及之后的元素后移</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//在位置i处放入e</span>L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//长度加1</span><span class="token keyword">return</span> ture<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//数据的删除</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//判断i是否有效</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>e <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将被删除的元素赋值给e</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将第i个位置后的元素前移</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//线性表长度减1</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//静态分配</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//查找元素</span>ElemTpye <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment">//动态分配</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">InitSize <span class="token number">10</span></span><span class="token comment">//顺序表的初始长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SeqList<span class="token punctuation">;</span><span class="token comment">//查找元素</span>ElemTpye <span class="token function">GetElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">InitSize <span class="token number">10</span></span><span class="token comment">//顺序表的初始长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SeqList<span class="token punctuation">;</span><span class="token comment">//查找表中第一个为t的元素，并返回其位序</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> e<span class="token punctuation">)</span>            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>调用：<span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此处应该注意–结构体的比较是不可以用”==”</li></ul>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 顺序表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建HEXO博客</title>
      <link href="2021/01/20/create-hexo/"/>
      <url>2021/01/20/create-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用  Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。关键是免费哦！</p><blockquote><p>白嫖什么的最香啦，让我们抓紧坐好，博客的航班即将起飞~</p></blockquote><h2 id="Git-And-Node-js"><a href="#Git-And-Node-js" class="headerlink" title="Git And Node.js"></a>Git And Node.js</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h4><blockquote><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理项目版本管理。(<strong>更多详情咨询度娘</strong>)</p><p><a href="https://baike.baidu.com/item/GIT/12647237?fr=aladdin">Git | 百度百科</a></p></blockquote><p>总而言之，Git可以帮我们处理很多很多事情，用就完事了。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>下载<a href="https://git-scm.com/">Git</a> (推荐下载最新版本)</p><p>下载完成后安装Git，教程请咨询度娘，十分简易。</p><p>最后，不要忘记配置Git文件，有些情况不配置使用无任何问题，但是我以前没配置的时候使用就出现了问题，这里还是建议去配置一下，so easy滴。</p><p>安装完成后，鼠标右击就能看到</p><p><img src="https://img-blog.csdn.net/20181012194653451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5ncXFkeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" loading="lazy"></p><p>点击Git Bash Here如果弹出命令框就表明安装成功。</p><p>也可以<kbd>Ctrl</kbd>+<kbd>R</kbd> 输入cmd打开命令窗口，输入git</p><p><img src="https://img-blog.csdn.net/20181012195409372?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5ncXFkeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" loading="lazy"></p><p>弹出如上所示就表明安装成功了！</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h4 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js?"></a>什么是Node.js?</h4><p>详情度娘告诉你    <a href="https://baike.baidu.com/item/node.js">Node.js | 百度百科</a></p><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>下载<a href="https://nodejs.org/zh-cn/">Node.js</a> (推荐下载最新版本)</p><p>详细安装教程请咨询度娘</p><p>安装完成后，<kbd>Ctrl</kbd>+<kbd>R</kbd> 输入cmd打开命令窗口</p><p>输入<code>npm --version</code>, 如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><p><strong><em>到这里第一步基本安装已经完成，接下来开始搭建Hexo</em></strong></p><blockquote><p>github账号应该都有吧，什么你没有？(点击右上角叉叉)   哈哈哈，开个玩笑，没有赶紧注册一个吧</p></blockquote><h2 id="Hexo的搭建"><a href="#Hexo的搭建" class="headerlink" title="Hexo的搭建"></a>Hexo的搭建</h2><h3 id="创建博客文件夹"><a href="#创建博客文件夹" class="headerlink" title="创建博客文件夹"></a>创建博客文件夹</h3><p>在自己的硬盘创建blog文件夹(文件夹的名字随意，自己喜欢并且能认出来就OK)，这样做的目的是以防出错，我们所有的操作都在这个文件夹里，出错删了重新来就完事，不出错万事大吉。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先进入创建好的文件夹，鼠标右击打开Git Bash Here(一定要在文件夹目录下操作)</p><blockquote><p>建议安装镜像网，提高国内访问速度，不然就是乌龟追兔子</p><p>使用以下语句安装镜像网</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></blockquote><p>镜像网安装完成后</p><p>使用命令<code>cnpm install -g hexo-cli</code>安装hexo</p><p>使用<code>hexo -v</code>查看版本</p><p>到这里就全部安装OK了</p><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>使用<code>hexo init</code>初始化</p><p>初始化成功后文件夹中会出现如下文件</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>使用<code>hexo g</code>生成</p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>使用<code>hexo s</code>启动</p><p>在浏览器中输入localhost:4000就可以查看咯</p><p>到这里搭建已经完成，博客可以正常访问，就这？博客只能在本地访问这就不叫博客了，叫记事本，我们应该让所有人都能看到，欣赏我们的著作啊(哈哈哈，夸一波)</p><p>下来才是重头戏，部署到GitHub上拥有属于自己的免费域名，随时随地随心随意的访问。</p><h2 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>登录GitHub创建新的仓库，取名为 <strong>你的名称.github.io</strong></p><p>如果不会创建仓库，咨询一下度娘</p><blockquote><p>创建的仓库用于存储</p></blockquote><p><strong>注：创建好仓库后一定一定不要关闭页面</strong></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>使用<code>cnpm install --save hexo-deployer-git</code>安装</p><h3 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h3><p>在博客文件夹中找到这个文件，翻到最底下进行配置</p><blockquote><p>deploy:<br> type: git<br> repo: <a href="https://github.com/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0.github.io.git">https://github.com/你的仓库名称/你的仓库名称.github.io.git</a></p><p>（这里的地址就是页面里HTTPS后面跟的那串地址，复制即可）<strong>刚才就叫你不要关闭了</strong></p><p> branch: master</p></blockquote><p><strong>注：冒号后面必须跟一个空格，所有的配置都必须加空格，一定要加，一定要加，一定要加</strong></p><h3 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h3><p>使用<code>hexo d</code>上传</p><p>接下来在浏览器中输入https://你的仓库名称.github.io/就可以访问咯，是不是很有B格。</p><p>到这里搭建以及部署工作就完成了，恭喜你，你的博客诞生啦。</p><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><p>博客搭建完成后，官方给出的是默认主题，我相信所有人都觉得不好看，接下来就需要你自己去寻找自己喜欢的主题进行配置，美化，达成自己想要的效果。</p><p>Over，完结！</p>]]></content>
      
      
      <categories>
          
          <category> 手把手教你搭建hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎大家来到我的博客</title>
      <link href="2021/01/01/welcome/"/>
      <url>2021/01/01/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="welcome-to-my-blog"><a href="#welcome-to-my-blog" class="headerlink" title="welcome to my blog"></a>welcome to my blog</h1><h2 id="诞生啦"><a href="#诞生啦" class="headerlink" title="诞生啦"></a>诞生啦</h2><p>TIME:    2021年1月1日 0:00:00 ，我的博客正式诞生。</p><h3 id="首先自我介绍下"><a href="#首先自我介绍下" class="headerlink" title="首先自我介绍下"></a>首先自我介绍下</h3><p>我，一个喜欢学习各种”厉害”操作的大学生，想去做人工智障的开发，哦不，是人工智能的开发。</p><h4 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h4><p>我希望通过博客的方式，记录下我的点点滴滴，分享我的学习内容，也希望可以和大佬们进行交流。</p><p>在这里再次欢迎你，朋友！</p><h2 id="这里是我们的乐园"><a href="#这里是我们的乐园" class="headerlink" title="这里是我们的乐园"></a>这里是我们的乐园</h2><p>这里不仅仅是我们学习的乐园，更是快乐的源泉，你能想到的都有，想不到的也有。</p><p>python从入门到放弃，sql从建表到删库跑路，linux从安装到电脑报废，这里通通不存在；浓缩的精华文章，让你的道路通畅无阻，当场原地起飞。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyuexi/blog-cdn/img/biaoqing/pianren.jpg" loading="lazy"></p><h2 id="奖励"><a href="#奖励" class="headerlink" title="奖励"></a>奖励</h2><p>感谢各位我的支持，我甚是感动，所以我要送一个大大的surprise</p><p>手把手教你搭建hexo博客，一个属于你自己博客，什么你不想？不，你想，你很想</p><p>你看这精美的页面，这丰富的内容(目前可能有些简陋)，不花钱的域名，它不香吗？</p><img src="https://cdn.jsdelivr.net/gh/wangyuexi/blog-cdn/img/biaoqing/mua.jpg" style="zoom:67%;" / loading="lazy"><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>看到下面伸手的图标了嘛，月色凄凉，唯有你才能温暖我的❤，ღ( ´･ᴗ･` )比心。</p><img src="https://cdn.jsdelivr.net/gh/wangyuexi/blog-cdn/img/biaoqing/hua.jpg" style="zoom:67%;" / loading="lazy">]]></content>
      
      
      <categories>
          
          <category> welcome to my blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> welcome to my blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
