<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性表-循环链表(附顺序表和链表的比较)</title>
      <link href="2021/08/05/linear-list-xhlb/"/>
      <url>2021/08/05/linear-list-xhlb/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表链式表示之双链表"><a href="#线性表链式表示之双链表" class="headerlink" title="线性表链式表示之双链表"></a>线性表链式表示之双链表</h2><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token comment">//定义单链表的结点类型</span>    ElemType data<span class="token punctuation">;</span><span class="token comment">//每个节点存放一个数据元素</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//指针指向下一个节点</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//初始化一个循环单链表</span>bool <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//头结点next指向头结点</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断循环单链表是否为空</span>bool <span class="token function">Empty</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断结点p是否为循环单链表的表尾结点、</span>bool <span class="token function">isTail</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> LNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">==</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DNode<span class="token punctuation">,</span> <span class="token operator">*</span>DLinkList<span class="token punctuation">;</span><span class="token comment">//初始化双链表</span>bool <span class="token function">InitDLinkList</span><span class="token punctuation">(</span>DLinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L <span class="token operator">-></span> prior <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//头结点的prior指向头结点</span>    L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//头结点的next指向头结点</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断循环双链表是否为空</span>bool <span class="token function">Empty</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">-></span> next <span class="token operator">=</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断结点p是否为循环双链表的表尾结点、</span>bool <span class="token function">isTail</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">,</span> DLNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">==</span> L<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环双链表的插入"><a href="#循环双链表的插入" class="headerlink" title="循环双链表的插入"></a>循环双链表的插入</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在p结点之后插入s结点</span>s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> s<span class="token punctuation">;</span>s <span class="token operator">-</span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此处就不需要if语句的判断</p><p>表尾的next     指向    头结点</p><p>表头的prior    指向    尾结点</p><p>因此不会出现空指针的错误</p></blockquote><h4 id="循环双链表的删除"><a href="#循环双链表的删除" class="headerlink" title="循环双链表的删除"></a>循环双链表的删除</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//删除p结点的后继结点</span>p <span class="token operator">-></span> next <span class="token operator">=</span> q <span class="token operator">-></span> next<span class="token punctuation">;</span>q <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>此处原理同上</p></blockquote><hr><h2 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h2><table><thead><tr><th align="center"></th><th align="center">顺序表</th><th align="center">链表</th></tr></thead><tbody><tr><td align="center">弹性（扩容）</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">增，删</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">查</td><td align="center">√</td><td align="center">×</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 循环链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表-双链表</title>
      <link href="2021/08/05/linear-list-slb/"/>
      <url>2021/08/05/linear-list-slb/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表链式表示之双链表"><a href="#线性表链式表示之双链表" class="headerlink" title="线性表链式表示之双链表"></a>线性表链式表示之双链表</h2><h3 id="双链表的定义"><a href="#双链表的定义" class="headerlink" title="双链表的定义"></a>双链表的定义</h3><h4 id="双链表的初始化"><a href="#双链表的初始化" class="headerlink" title="双链表的初始化"></a>双链表的初始化</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DNode<span class="token punctuation">,</span> <span class="token operator">*</span>DLinkList<span class="token punctuation">;</span><span class="token comment">//初始化双链表</span>bool <span class="token function">InitDLinkList</span><span class="token punctuation">(</span>DLinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>DNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L <span class="token operator">-></span> prior <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//头结点的prior永远指向 NULL</span>    L <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//头结点之后暂时还没有结点</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在p结点之后插入s结点</span>bool <span class="token function">InsertNextDNode</span><span class="token punctuation">(</span>DNode <span class="token operator">*</span>p<span class="token punctuation">,</span> DNode <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//将结点s插入到结点p之后</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    p <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> s<span class="token punctuation">;</span>    s <span class="token operator">-</span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span>    p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//删除p结点的后继结点</span>bool <span class="token function">DeleteNextDNode</span><span class="token punctuation">(</span>DNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    DNode <span class="token operator">*</span>q <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//找到p的后继结点q</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    p <span class="token operator">-></span> next <span class="token operator">=</span> q <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">-></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    q <span class="token operator">-></span> next <span class="token operator">-></span> prior <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表的遍历"><a href="#双链表的遍历" class="headerlink" title="双链表的遍历"></a>双链表的遍历</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//前向遍历</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p <span class="token operator">-></span> prior<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//前向遍历(跳过头结点)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">-></span> prior <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p <span class="token operator">-></span> prior<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//后向遍历</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表-单链表</title>
      <link href="2021/08/05/linear-list-dlb/"/>
      <url>2021/08/05/linear-list-dlb/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表链式表示之单链表"><a href="#线性表链式表示之单链表" class="headerlink" title="线性表链式表示之单链表"></a>线性表链式表示之单链表</h2><h3 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h3><h4 id="单链表的初始化"><a href="#单链表的初始化" class="headerlink" title="单链表的初始化"></a>单链表的初始化</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token comment">//定义单链表的结点类型</span>    ElemType data<span class="token punctuation">;</span><span class="token comment">//每个节点存放一个数据元素</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//指针指向下一个节点</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//初始化一个单链表(带头结点)</span>bool <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个头结点</span><span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>L <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//头结点后暂时还无结点</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>L为表头的指针域</li></ul><h3 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h3><blockquote><p>此处所有操作都基于带头结点</p></blockquote><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><h5 id="按位序插入"><a href="#按位序插入" class="headerlink" title="按位序插入"></a>按位序插入</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct LNode&#123;...&#125;LNode, *LinkList;&#x2F;&#x2F;在第i个位置插入元素 ebool ListInsert(LinkList &amp;L, int i, ElemType e)&#123;if(i&lt;1)return false;LNode *p;&#x2F;&#x2F;指针p指向当前扫描到的结点int j &#x3D; 0;&#x2F;&#x2F;当前p指向的是第几个结点p &#x3D; L;&#x2F;&#x2F;L指向头结点，头结点是第0个结点while(p !&#x3D; NULL &amp;&amp; j &lt; i - 1)&#123;&#x2F;&#x2F;循环找到第i-1个结点p &#x3D; p -&gt; next;j++;&#125;if(p &#x3D;&#x3D; NULL)&#x2F;&#x2F;i值不合法return false;LNode *s &#x3D;(LNode *) malloc(sizeof(LNode));s -&gt; data &#x3D; e;s -&gt; next &#x3D; p -&gt; next;p -&gt; next &#x3D; s;&#x2F;&#x2F;将结点s连到p结点之后return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a>指定结点的前插操作</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//前插操作：p结点之前插入元素e</span>bool <span class="token function">InsertPriorNode</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>p<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//新结点s连到p之后</span>s <span class="token operator">-></span> data <span class="token operator">=</span> p <span class="token operator">-></span> data<span class="token punctuation">;</span><span class="token comment">//将p中元素复制到s中</span>p <span class="token operator">-></span> data <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//p中元素覆盖为e</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a>指定结点的后插操作</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//后插操作：p结点之后插入元素e</span>bool <span class="token function">InsertNextNode</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span>p<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>s <span class="token operator">=</span><span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>s <span class="token operator">-></span> data <span class="token operator">=</span> e<span class="token punctuation">;</span>s <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>p <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//将结点s连到p结点之后</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><h5 id="按位序删除"><a href="#按位序删除" class="headerlink" title="按位序删除"></a>按位序删除</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//删除第i个元素</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//指针p指向当前扫描到的结点</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前p指向的是第几个结点</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//L指向头结点，头结点是第0个结点</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环找到第i-1个结点</span>p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//第i-1个结点后已无其他结点</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>LNode <span class="token operator">*</span>q <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//令q指向被删除的结点</span>e <span class="token operator">=</span> q <span class="token operator">-></span> data<span class="token punctuation">;</span><span class="token comment">//用e返回元素的值</span>p <span class="token operator">-></span> next <span class="token operator">=</span> q <span class="token operator">-></span> next<span class="token punctuation">;</span><span class="token comment">//将*q结点从链中断开</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放结点的存储空间</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指定结点的删除"><a href="#指定结点的删除" class="headerlink" title="指定结点的删除"></a>指定结点的删除</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;删除指定结点bool DeleteNode(LNode *p)&#123;if(p &#x3D;&#x3D; NULL)return false;LNode *q &#x3D; p -&gt; next;&#x2F;&#x2F;令q指向*p的后继结点p -&gt; data &#x3D; p -&gt; next -&gt; data;&#x2F;&#x2F;和后继结点交换数据域p -&gt; next &#x3D; q -&gt; next;&#x2F;&#x2F;将*q结点从链中断开free(q);&#x2F;&#x2F;释放后继结点中的存储空间return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种方式如果删除的是最后一个结点会报错，使用双链表可以解决此问题.</li></ul><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><h5 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//按位查找，返回第i个元素</span>LNode <span class="token operator">*</span><span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//指针P指向当前扫描到的结点</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当前p指向的是第几个结点</span>    P <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//L指向头结点，头结点是第0个结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//循环找到第i个结点</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//按值查找，找到数据域为 e 的结点</span>LNode <span class="token operator">*</span><span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token comment">//从第1个结点开始查找数据域为e的结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">-></span> data <span class="token operator">!</span> <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">-></span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p <span class="token operator">-></span> next<span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立链表"><a href="#建立链表" class="headerlink" title="建立链表"></a>建立链表</h4><h5 id="尾插法建立"><a href="#尾插法建立" class="headerlink" title="尾插法建立"></a>尾插法建立</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span>LNode <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>r <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">-></span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>    r <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span>    r <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>r <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="头插法建立"><a href="#头插法建立" class="headerlink" title="头插法建立"></a>头插法建立</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span>LNode <span class="token operator">*</span>s<span class="token punctuation">;</span>L <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">-></span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>    s <span class="token operator">-></span> next <span class="token operator">=</span> L <span class="token operator">-></span> next<span class="token punctuation">;</span>    L <span class="token operator">-></span> next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>头插法会发现结果将插入的数值逆序了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表-顺序表</title>
      <link href="2021/08/05/linear-list-order/"/>
      <url>2021/08/05/linear-list-order/</url>
      
        <content type="html"><![CDATA[<h2 id="线性表的顺序表示"><a href="#线性表的顺序表示" class="headerlink" title="线性表的顺序表示"></a>线性表的顺序表示</h2><h3 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h3><ul><li>顺序表的最大特点是：<font color=#FF0000 >表中元素的逻辑顺序与其物理顺序相同</font></li></ul><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span><span class="token comment">//定义最大长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用静态数组存放数据元素</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//顺序表当前的长度</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//顺序表类型的定义</span><span class="token comment">//初始化一个顺序表</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//默认值设置为0</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//顺序表初始长度为0</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SqList L<span class="token punctuation">;</span><span class="token comment">//声明一个顺序表</span><span class="token function">InitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化循序表</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">InitSize <span class="token number">10</span></span><span class="token comment">//顺序表的初始长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token comment">//指示动态分配数组的指针</span>    <span class="token keyword">int</span> MaxSize<span class="token punctuation">;</span><span class="token comment">//顺序表的最大容量</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//顺序表的当前长度</span><span class="token punctuation">&#125;</span>SeqList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>SeqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用malloc函数申请一片连续的存储空间</span>L<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>InitSize <span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>L<span class="token punctuation">.</span>MaxSize <span class="token operator">=</span> InitSize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//增加动态数组的长度</span><span class="token keyword">void</span> <span class="token function">IncreaseSize</span><span class="token punctuation">(</span>SeqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">;</span>L<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>MaxSize <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将数据复制到新区域</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>MaxSize <span class="token operator">=</span> L<span class="token punctuation">.</span>MaxSize <span class="token operator">+</span> len<span class="token punctuation">;</span>    <span class="token comment">//顺序表的最大长度增加len</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放原来存储空间</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SeqList L<span class="token punctuation">;</span><span class="token comment">//声明一个顺序表</span>    <span class="token function">InitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化顺序表</span>    <span class="token comment">//....随便加几个数据....</span>    <span class="token function">IncreaseSize</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h3><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span><span class="token comment">//定义最大长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用静态数组存放数据元素</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//顺序表当前的长度</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//顺序表类型的定义</span><span class="token comment">//插入元素</span>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//判断i是否有效</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">>=</span> MaxSize<span class="token punctuation">)</span><span class="token comment">//当前存满，不能插入</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将第i个元素以及之后的元素后移</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">//在位置i处放入e</span>L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//长度加1</span><span class="token keyword">return</span> ture<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//数据的删除</span>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//判断i是否有效</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>e <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将被删除的元素赋值给e</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将第i个位置后的元素前移</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//线性表长度减1</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//静态分配</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">MaxSize <span class="token number">10</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//查找元素</span>ElemTpye <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment">//动态分配</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">InitSize <span class="token number">10</span></span><span class="token comment">//顺序表的初始长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SeqList<span class="token punctuation">;</span><span class="token comment">//查找元素</span>ElemTpye <span class="token function">GetElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">InitSize <span class="token number">10</span></span><span class="token comment">//顺序表的初始长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>SeqList<span class="token punctuation">;</span><span class="token comment">//查找表中第一个为t的元素，并返回其位序</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>SeqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> e<span class="token punctuation">)</span>            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>调用：<span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此处应该注意–结构体的比较是不可以用”==”</li></ul>]]></content>
      
      
      <categories>
          
          <category> 考研数据结构专用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 顺序表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建HEXO博客</title>
      <link href="2021/01/20/create-hexo/"/>
      <url>2021/01/20/create-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用  Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。关键是免费哦！</p><blockquote><p>白嫖什么的最香啦，让我们抓紧坐好，博客的航班即将起飞~</p></blockquote><h2 id="Git-And-Node-js"><a href="#Git-And-Node-js" class="headerlink" title="Git And Node.js"></a>Git And Node.js</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="什么是Git？"><a href="#什么是Git？" class="headerlink" title="什么是Git？"></a>什么是Git？</h4><blockquote><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理项目版本管理。(<strong>更多详情咨询度娘</strong>)</p><p><a href="https://baike.baidu.com/item/GIT/12647237?fr=aladdin">Git | 百度百科</a></p></blockquote><p>总而言之，Git可以帮我们处理很多很多事情，用就完事了。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>下载<a href="https://git-scm.com/">Git</a> (推荐下载最新版本)</p><p>下载完成后安装Git，教程请咨询度娘，十分简易。</p><p>最后，不要忘记配置Git文件，有些情况不配置使用无任何问题，但是我以前没配置的时候使用就出现了问题，这里还是建议去配置一下，so easy滴。</p><p>安装完成后，鼠标右击就能看到</p><p><img src="https://img-blog.csdn.net/20181012194653451?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5ncXFkeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" loading="lazy"></p><p>点击Git Bash Here如果弹出命令框就表明安装成功。</p><p>也可以<kbd>Ctrl</kbd>+<kbd>R</kbd> 输入cmd打开命令窗口，输入git</p><p><img src="https://img-blog.csdn.net/20181012195409372?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5ncXFkeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" loading="lazy"></p><p>弹出如上所示就表明安装成功了！</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><h4 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js?"></a>什么是Node.js?</h4><p>详情度娘告诉你    <a href="https://baike.baidu.com/item/node.js">Node.js | 百度百科</a></p><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>下载<a href="https://nodejs.org/zh-cn/">Node.js</a> (推荐下载最新版本)</p><p>详细安装教程请咨询度娘</p><p>安装完成后，<kbd>Ctrl</kbd>+<kbd>R</kbd> 输入cmd打开命令窗口</p><p>输入<code>npm --version</code>, 如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><p><strong><em>到这里第一步基本安装已经完成，接下来开始搭建Hexo</em></strong></p><blockquote><p>github账号应该都有吧，什么你没有？(点击右上角叉叉)   哈哈哈，开个玩笑，没有赶紧注册一个吧</p></blockquote><h2 id="Hexo的搭建"><a href="#Hexo的搭建" class="headerlink" title="Hexo的搭建"></a>Hexo的搭建</h2><h3 id="创建博客文件夹"><a href="#创建博客文件夹" class="headerlink" title="创建博客文件夹"></a>创建博客文件夹</h3><p>在自己的硬盘创建blog文件夹(文件夹的名字随意，自己喜欢并且能认出来就OK)，这样做的目的是以防出错，我们所有的操作都在这个文件夹里，出错删了重新来就完事，不出错万事大吉。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先进入创建好的文件夹，鼠标右击打开Git Bash Here(一定要在文件夹目录下操作)</p><blockquote><p>建议安装镜像网，提高国内访问速度，不然就是乌龟追兔子</p><p>使用以下语句安装镜像网</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></blockquote><p>镜像网安装完成后</p><p>使用命令<code>cnpm install -g hexo-cli</code>安装hexo</p><p>使用<code>hexo -v</code>查看版本</p><p>到这里就全部安装OK了</p><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>使用<code>hexo init</code>初始化</p><p>初始化成功后文件夹中会出现如下文件</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>使用<code>hexo g</code>生成</p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>使用<code>hexo s</code>启动</p><p>在浏览器中输入localhost:4000就可以查看咯</p><p>到这里搭建已经完成，博客可以正常访问，就这？博客只能在本地访问这就不叫博客了，叫记事本，我们应该让所有人都能看到，欣赏我们的著作啊(哈哈哈，夸一波)</p><p>下来才是重头戏，部署到GitHub上拥有属于自己的免费域名，随时随地随心随意的访问。</p><h2 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>登录GitHub创建新的仓库，取名为 <strong>你的名称.github.io</strong></p><p>如果不会创建仓库，咨询一下度娘</p><blockquote><p>创建的仓库用于存储</p></blockquote><p><strong>注：创建好仓库后一定一定不要关闭页面</strong></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>使用<code>cnpm install --save hexo-deployer-git</code>安装</p><h3 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h3><p>在博客文件夹中找到这个文件，翻到最底下进行配置</p><blockquote><p>deploy:<br> type: git<br> repo: <a href="https://github.com/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0.github.io.git">https://github.com/你的仓库名称/你的仓库名称.github.io.git</a></p><p>（这里的地址就是页面里HTTPS后面跟的那串地址，复制即可）<strong>刚才就叫你不要关闭了</strong></p><p> branch: master</p></blockquote><p><strong>注：冒号后面必须跟一个空格，所有的配置都必须加空格，一定要加，一定要加，一定要加</strong></p><h3 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h3><p>使用<code>hexo d</code>上传</p><p>接下来在浏览器中输入https://你的仓库名称.github.io/就可以访问咯，是不是很有B格。</p><p>到这里搭建以及部署工作就完成了，恭喜你，你的博客诞生啦。</p><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><p>博客搭建完成后，官方给出的是默认主题，我相信所有人都觉得不好看，接下来就需要你自己去寻找自己喜欢的主题进行配置，美化，达成自己想要的效果。</p><p>Over，完结！</p>]]></content>
      
      
      <categories>
          
          <category> 手把手教你搭建hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎大家来到我的博客</title>
      <link href="2021/01/01/welcome/"/>
      <url>2021/01/01/welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="welcome-to-my-blog"><a href="#welcome-to-my-blog" class="headerlink" title="welcome to my blog"></a>welcome to my blog</h1><h2 id="诞生啦"><a href="#诞生啦" class="headerlink" title="诞生啦"></a>诞生啦</h2><p>TIME:    2021年1月1日 0:00:00 ，我的博客正式诞生。</p><h3 id="首先自我介绍下"><a href="#首先自我介绍下" class="headerlink" title="首先自我介绍下"></a>首先自我介绍下</h3><p>我，一个喜欢学习各种”厉害”操作的大学生，想去做人工智障的开发，哦不，是人工智能的开发。</p><h4 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h4><p>我希望通过博客的方式，记录下我的点点滴滴，分享我的学习内容，也希望可以和大佬们进行交流。</p><p>在这里再次欢迎你，朋友！</p><h2 id="这里是我们的乐园"><a href="#这里是我们的乐园" class="headerlink" title="这里是我们的乐园"></a>这里是我们的乐园</h2><p>这里不仅仅是我们学习的乐园，更是快乐的源泉，你能想到的都有，想不到的也有。</p><p>python从入门到放弃，sql从建表到删库跑路，linux从安装到电脑报废，这里通通不存在；浓缩的精华文章，让你的道路通畅无阻，当场原地起飞。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyuexi/blog-cdn/img/biaoqing/pianren.jpg" loading="lazy"></p><h2 id="奖励"><a href="#奖励" class="headerlink" title="奖励"></a>奖励</h2><p>感谢各位我的支持，我甚是感动，所以我要送一个大大的surprise</p><p>手把手教你搭建hexo博客，一个属于你自己博客，什么你不想？不，你想，你很想</p><p>你看这精美的页面，这丰富的内容(目前可能有些简陋)，不花钱的域名，它不香吗？</p><img src="https://cdn.jsdelivr.net/gh/wangyuexi/blog-cdn/img/biaoqing/mua.jpg" style="zoom:67%;" / loading="lazy"><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>看到下面伸手的图标了嘛，月色凄凉，唯有你才能温暖我的❤，ღ( ´･ᴗ･` )比心。</p><img src="https://cdn.jsdelivr.net/gh/wangyuexi/blog-cdn/img/biaoqing/hua.jpg" style="zoom:67%;" / loading="lazy">]]></content>
      
      
      <categories>
          
          <category> welcome to my blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> welcome to my blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
